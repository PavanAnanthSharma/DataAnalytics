{"_id":"protons","_rev":"4-463e3fbc9a4d61a79595f24832337c5e","name":"protons","description":"Protocol Buffers for Node.js without compiliation","dist-tags":{"latest":"1.0.1"},"versions":{"1.0.0":{"name":"protons","version":"1.0.0","description":"Protocol Buffers for Node.js without compiliation","repository":{"type":"git","url":"git+https://github.com/dignifiedquire/protons.git"},"dependencies":{"brfs":"^1.4.3","protocol-buffers-schema":"^3.3.1","safe-buffer":"^5.1.1","signed-varint":"^2.0.1","varint":"^5.0.0"},"devDependencies":{"aegir":"^12.0.6","benchmark":"^2.1.4","protocol-buffers":"^3.2.1","standard":"^10.0.3","tape":"^4.8.0"},"scripts":{"lint":"aegir lint","test":"tape test/*.js","bench":"node bench"},"browserify":{"transform":["brfs"]},"bugs":{"url":"https://github.com/dignifiedquire/protons/issues"},"homepage":"https://github.com/dignifiedquire/protons","main":"src/index.js","directories":{"test":"test"},"keywords":["protobuf","protocol","buffers","protocolbuffers","encode","decode","google","serialize","parse","levelup","encodings","encoding"],"author":{"name":"Friedel Ziegelmayer","email":"dignifiedquire@gmail.com"},"license":"MIT","gitHead":"db6d2fb284e9d9be71b7e191a893b205ef42b8a0","_id":"protons@1.0.0","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"dignifiedquire","email":"dignifiedquire@gmail.com"},"dist":{"integrity":"sha512-n+FhiYi0NMM3A84BeeD4tQ878F6qZnbaoBiO4GjIIzqyd4p5SaGiGwduPbtKeVMrNFuzIuh6jEA7vmw9sExcpQ==","shasum":"cf836223ddc727680abf872ffa1ae8f505826fa3","tarball":"https://registry.npmjs.org/protons/-/protons-1.0.0.tgz"},"maintainers":[{"name":"dignifiedquire","email":"dignifiedquire@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/protons-1.0.0.tgz_1504733003765_0.9738538085948676"}},"1.0.1":{"name":"protons","version":"1.0.1","description":"Protocol Buffers for Node.js without compiliation","repository":{"type":"git","url":"git+https://github.com/ipfs/protons.git"},"dependencies":{"protocol-buffers-schema":"^3.3.1","safe-buffer":"^5.1.1","signed-varint":"^2.0.1","varint":"^5.0.0"},"devDependencies":{"aegir":"^12.2.0","benchmark":"^2.1.4","protocol-buffers":"^3.2.1","protons":"^1.0.0","tape":"^4.8.0"},"scripts":{"lint":"aegir lint","test":"tape test/*.js","bench":"node bench"},"bugs":{"url":"https://github.com/ipfs/protons/issues"},"homepage":"https://github.com/ipfs/protons","main":"src/index.js","directories":{"test":"test"},"keywords":["protobuf","protocol","buffers","protocolbuffers","encode","decode","google","serialize","parse","levelup","encodings","encoding"],"author":{"name":"Friedel Ziegelmayer","email":"dignifiedquire@gmail.com"},"license":"MIT","gitHead":"96187c9c2d9a936ce25250f7616feb4de1f1490b","_id":"protons@1.0.1","_npmVersion":"5.5.1","_nodeVersion":"8.8.0","_npmUser":{"name":"daviddias","email":"daviddias.p@gmail.com"},"dist":{"integrity":"sha512-+0ZKnfVs+4c43tbAQ5j0Mck8wPcLnlxUYzKQoB4iDW4ocdXGnN4P+0dDbgX1FTpoY9+7P2Tn2scJyHHqj+S/lQ==","shasum":"1c107144c07fc2d1cb8b6cb76451e6a938237676","tarball":"https://registry.npmjs.org/protons/-/protons-1.0.1.tgz"},"maintainers":[{"name":"daviddias","email":"daviddias.p@gmail.com"},{"name":"dignifiedquire","email":"dignifiedquire@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/protons-1.0.1.tgz_1512675023959_0.09943613200448453"}}},"readme":"# protons\n\n[![Dependency Status](https://david-dm.org/ipfs/protons.svg?style=flat-square)](https://david-dm.org/ipfs/protons)\n[![Travis CI](https://travis-ci.org/ipfs/protons.svg?branch=master)](https://travis-ci.org/ipfs/protons)\n\n> [Protocol Buffers](https://developers.google.com/protocol-buffers/) for Node.js and the browser without compilation and `eval`.\n>\n> Forked from [protocol-buffers](https://github.com/mafintos/protocol-buffers) to remove usage of `eval`.\n\n```\n> npm install protons\n```\n\n## Usage\n\nAssuming the following `test.proto` file exists\n\n```proto\nenum FOO {\n  BAR = 1;\n}\n\nmessage Test {\n  required float num  = 1;\n  required string payload = 2;\n}\n\nmessage AnotherOne {\n  repeated FOO list = 1;\n}\n```\n\nUse the above proto file to encode/decode messages by doing\n\n``` js\nconst protons = require('protons')\n\n// pass a proto file as a buffer/string or pass a parsed protobuf-schema object\nconst messages = protons(fs.readFileSync('test.proto'))\n\nconst buf = messages.Test.encode({\n  num: 42,\n  payload: 'hello world'\n})\n\nconsole.log(buf) // should print a buffer\n```\n\nTo decode a message use `Test.decode`\n\n``` js\nconst obj = messages.Test.decode(buf)\nconsole.log(obj) // should print an object similar to above\n```\n\nEnums are accessed in the same way as messages\n\n``` js\nconst buf = messages.AnotherOne.encode({\n  list: [\n    messages.FOO.BAR\n  ]\n})\n```\n\nNested emums are accessed as properties on the corresponding message\n\n``` js\nconst buf = message.SomeMessage.encode({\n  list: [\n    messages.SomeMessage.NESTED_ENUM.VALUE\n  ]\n})\n```\n\nSee the [Google Protocol Buffers docs](https://developers.google.com/protocol-buffers/) for more information about the\navailable types etc.\n\n## Performance\n\nThis module is pretty fast.\n\nYou can run the benchmarks yourself by doing `npm run bench`.\n\nOn my Macbook Pro it gives the following results\n\n```\nJSON (encode) x 516,087 ops/sec ±6.68% (73 runs sampled)\nJSON (decode) x 534,339 ops/sec ±1.79% (89 runs sampled)\nJSON(encode + decode) x 236,625 ops/sec ±5.42% (81 runs sampled)\nprotocol-buffers (encode) x 385,121 ops/sec ±3.89% (82 runs sampled)\nprotocol-buffers (decode) x 945,545 ops/sec ±2.39% (86 runs sampled)\nprotocol-buffers(encode + decode) x 279,605 ops/sec ±2.83% (86 runs sampled)\nnpm (encode) x 377,625 ops/sec ±3.15% (84 runs sampled)\nnpm (decode) x 948,428 ops/sec ±3.59% (87 runs sampled)\nnpm(encode + decode) x 251,929 ops/sec ±2.91% (81 runs sampled)\nlocal (encode) x 373,376 ops/sec ±6.90% (66 runs sampled)\nlocal (decode) x 1,770,870 ops/sec ±1.50% (83 runs sampled)\nlocal(encode + decode) x 322,507 ops/sec ±2.82% (79 runs sampled)\n```\n\nNote that JSON parsing/serialization in node is a native function that is *really* fast.\n\n## Leveldb encoding compatibility\n\nCompiled protocol buffers messages are valid levelup encodings.\nThis means you can pass them as `valueEncoding` and `keyEncoding`.\n\n``` js\nconst level = require('level')\nconst db = level('db')\n\ndb.put('hello', {payload:'world'}, {valueEncoding:messages.Test}, (err) => {\n  db.get('hello', {valueEncoding:messages.Test}, (err, message) => {\n    console.log(message)\n  })\n})\n```\n\n## License\n\nMIT\n","maintainers":[{"name":"daviddias","email":"daviddias.p@gmail.com"},{"name":"dignifiedquire","email":"dignifiedquire@gmail.com"}],"time":{"modified":"2017-12-07T19:30:24.934Z","created":"2017-09-06T21:23:25.634Z","1.0.0":"2017-09-06T21:23:25.634Z","1.0.1":"2017-12-07T19:30:24.934Z"},"homepage":"https://github.com/ipfs/protons","keywords":["protobuf","protocol","buffers","protocolbuffers","encode","decode","google","serialize","parse","levelup","encodings","encoding"],"repository":{"type":"git","url":"git+https://github.com/ipfs/protons.git"},"author":{"name":"Friedel Ziegelmayer","email":"dignifiedquire@gmail.com"},"bugs":{"url":"https://github.com/ipfs/protons/issues"},"license":"MIT","readmeFilename":"README.md","users":{"eerne":true},"_attachments":{},"_etag":"W/\"049f79d64affb5e7e41174cf92978fb5\"","_lastModified":"Sun, 27 May 2018 13:02:31 GMT","_cached":true}