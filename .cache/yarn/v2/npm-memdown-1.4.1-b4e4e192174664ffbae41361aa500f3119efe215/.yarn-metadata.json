{
  "manifest": {
    "name": "memdown",
    "description": "An drop-in replacement for LevelDOWN that works in memory only",
    "version": "1.4.1",
    "homepage": "https://github.com/Level/memdown",
    "authors": [
      "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
    ],
    "contributors": [
      {
        "name": "Julian Gruber",
        "email": "julian@juliangruber.com",
        "url": "https://github.com/juliangruber"
      },
      {
        "name": "Meirion Hughes",
        "email": "crakinshot@yahoo.com",
        "url": "https://github.com/meirionhughes"
      }
    ],
    "keywords": [
      "leveldb",
      "leveldown",
      "levelup",
      "memory"
    ],
    "main": "memdown.js",
    "typings": "memdown.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/Level/memdown.git"
    },
    "dependencies": {
      "abstract-leveldown": "~2.7.1",
      "functional-red-black-tree": "^1.0.1",
      "immediate": "^3.2.3",
      "inherits": "~2.0.1",
      "ltgt": "~2.2.0",
      "safe-buffer": "~5.1.1"
    },
    "devDependencies": {
      "bench": "*",
      "faucet": "*",
      "istanbul": "^0.4.2",
      "istanbul-coveralls": "^1.0.3",
      "rimraf": "*",
      "standard": "^10.0.3",
      "tape": "*",
      "zuul": "github:vweevers/zuul#custom-loopback-hostname"
    },
    "browser": {
      "rimraf": false,
      "./immediate.js": "./immediate-browser.js"
    },
    "scripts": {
      "test": "standard && node ./test.js --stderr | faucet",
      "test-browsers": "zuul --browser-retries 2 --sauce-connect --concurrency 5 --loopback zuul.local --no-coverage ./test.js",
      "test-browser-local": "zuul --ui tape --no-coverage --local 9000 ./test.js",
      "coverage": "istanbul cover -i memdown.js ./node_modules/.bin/tape ./test.js && istanbul check-coverage --lines 90 --function 80 --statements 90 --branches 80",
      "report-coverage": "npm run coverage && istanbul-coveralls"
    },
    "license": "MIT",
    "files": [
      "memdown.js",
      "memdown.d.ts",
      "immediate.js",
      "immediate-browser.js"
    ],
    "_registry": "npm",
    "_loc": "/home/salil007/.cache/yarn/v2/npm-memdown-1.4.1-b4e4e192174664ffbae41361aa500f3119efe215/package.json",
    "readmeFilename": "README.md",
    "readme": "# memdown <img alt=\"LevelDB Logo\" height=\"20\" src=\"http://leveldb.org/img/logo.svg\" />\n\n> In-memory `abstract-leveldown` store for Node.js and browsers.\n\n[![Travis](https://secure.travis-ci.org/Level/memdown.png)](http://travis-ci.org/Level/memdown) [![Coverage Status](https://coveralls.io/repos/Level/memdown/badge.svg?branch=master&service=github)](https://coveralls.io/github/Level/memdown?branch=master) [![npm](https://img.shields.io/npm/v/memdown.svg)](https://www.npmjs.com/package/memdown) [![npm](https://img.shields.io/npm/dm/memdown.svg)](https://www.npmjs.com/package/memdown) [![Greenkeeper badge](https://badges.greenkeeper.io/Level/memdown.svg)](https://greenkeeper.io/)\n\n## Example\n\n`levelup` allows you to pass a `db` option to its constructor. This overrides the default `leveldown` store.\n\n```js\n// Note that if multiple instances point to the same location,\n// the db will be shared, but only per process.\nvar levelup = require('levelup')\nvar db = levelup('/some/location', { db: require('memdown') })\n\ndb.put('hey', 'you', function (err) {\n  if (err) throw err\n\n  db.createReadStream()\n    .on('data', function (kv) {\n      console.log('%s: %s', kv.key, kv.value)\n    })\n    .on('end', function () {\n      console.log('done')\n    })\n})\n```\n\nYour data is discarded when the process ends or you release a reference to the database. Note as well, though the internals of `memdown` operate synchronously - `levelup` does not.\n\nRunning our example gives:\n\n```\nhey: you\ndone\n```\n\nBrowser support\n----\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/level-ci.svg)](https://saucelabs.com/u/level-ci)\n\n`memdown` requires a ES5-capable browser. If you're using one that's isn't (e.g. PhantomJS, Android < 4.4, IE < 10) then you will need [es5-shim](https://github.com/es-shims/es5-shim).\n\nGlobal Store\n---\n\nEven though it's in memory, the location parameter does do something. `memdown`\nhas a global cache, which it uses to save databases by the path string.\n\nSo for instance if you create these two instances:\n\n```js\nvar db1 = levelup('foo', {db: require('memdown')});\nvar db2 = levelup('foo', {db: require('memdown')});\n```\n\nThen they will actually share the same data, because the `'foo'` string is the same.\n\nYou may clear this global store using `memdown.clearGlobalStore()`:\n\n```js\nrequire('memdown').clearGlobalStore();\n```\n\nBy default, it doesn't delete the store but replaces it with a new one, so the open instance of `memdown` will not be affected.\n\n`clearGlobalStore` takes a single parameter, which if truthy clears the store strictly by deleting each individual key:\n\n```js\nrequire('memdown').clearGlobalStore(true); // delete each individual key\n```\n\nIf you are using `memdown` somewhere else while simultaneously clearing the global store in this way, then it may throw an error or cause unexpected results.\n\nTest\n----\n\nIn addition to the regular `npm test`, you can test `memdown` in a browser of choice with:\n\n    npm run test-browser-local\n\nTo check code coverage:\n\n    npm run coverage\n\nLicence\n---\n\n`memdown` is Copyright (c) 2013-2017 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
    "licenseText": "Copyright 2013, Rod Vagg (the \"Original Author\")\nAll rights reserved.\n\nMIT +no-false-attribs License\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nDistributions of all or part of the Software intended to be used\nby the recipients as they would use the unmodified Software,\ncontaining modifications that substantially alter, remove, or\ndisable functionality of the Software, outside of the documented\nconfiguration mechanisms provided by the Software, shall be\nmodified such that the Original Author's bug reporting email\naddresses and urls are either replaced with the contact information\nof the parties responsible for the changes, or removed entirely.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\nExcept where noted, this license applies to any and all software\nprograms and associated documentation files created by the\nOriginal Author, when distributed with the Software."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/memdown/-/memdown-1.4.1.tgz#b4e4e192174664ffbae41361aa500f3119efe215",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/memdown/-/memdown-1.4.1.tgz",
    "hash": "b4e4e192174664ffbae41361aa500f3119efe215",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "b4e4e192174664ffbae41361aa500f3119efe215"
}